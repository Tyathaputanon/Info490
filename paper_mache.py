# -*- coding: utf-8 -*-
"""INFO490-Paper-Mache

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q3hYeJw97mz6E6tPD5GXbVX-HY-n9lhq
"""

import pandas as pd
import io
import requests
import numpy as np
URL = 'https://raw.githubusercontent.com/NSF-EC/INFO490Assets/master/src/datasets/dunder/dm101s.csv'

#Q1: build the dataframe
def build_dataframe(resource):
  #s=requests.get(resource).content
  df=pd.read_csv(resource)
  df.columns = df.columns.str.replace(' ', '')


  return (df)

build_dataframe(URL)

df = build_dataframe(URL)

#Q2: return total sales for entire company 
def total_sales(df):
  return df['Total'].sum()

#print(total_sales(df))

#Q3: return the total sales by Pam (across all months, products, regions)
def pam_sales(df):
  salesperson = df[df['SalesPerson'] == 'Pam']
  return (salesperson['Total']).sum()

#pam_sales(df)

#Q4: return an array that contains the set of all the possible products sold
def all_products(df):
  products = (df[['Product']])
  products = products.drop_duplicates()
  return products['Product'].unique()
  


#all_products(df)

#Q5: return the total for paper sold by Dwight 
def dwight_paper_sales(df):
  person = df[df['SalesPerson'] == 'Dwight']
  print(person)
  category = person[person['Category']== "Paper"]
  print(category)
  return category['Total'].sum()

#dwight_paper_sales(df)

#Q6: return the total sales by region.
def sales_by_region(df):
  region = df[['Region','Total']]
  #print(region)
  return region.groupby('Region')['Total'].sum()

#sales_by_region(df)

#Q7: return the monthly average for Andy's sales of Bond-20 and Bond-50 paper.
def andy_bond_sales(df):
  salesperson = df[df['SalesPerson']=='Andy']
  group = salesperson[salesperson['Product'].str.contains('Bond')]
  drop = group[~group["Product"].str.contains('40|30')]
  avg = drop['Total'].sum()
  output = avg/12
  return(output)
  # product = drop.groupby(['Month','Product','Total'])['Total'].mean()
  # averageall = product['Total'].mean()
  # print(averageall)
  #return(product)

#andy_bond_sales(df)

#Q8: Recalculate the same value as in question7 but remove his December 'sales'
def andy_bond_sales_adjusted(df):
  salesperson = df[df['SalesPerson']=='Andy']
  group = salesperson[salesperson['Product'].str.contains('Bond')]
  drop = group[~group["Product"].str.contains('40|30')]
  drop_dec = drop[~drop["Month"].str.contains('Dec')]
  avg = drop_dec['Total'].sum()
  output = avg/12
  return(output)


#andy_bond_sales_adjusted(df)

#Q9: returns the top(n) salespeople based on total sales for the year
def top_sales_people(df,topn):
  sales_by_person = df. groupby('SalesPerson')['Total'].sum()
  return sales_by_person.nlargest(topn, keep='all')

#top_sales_people(df,3)

#Q10: returns a DataFrame that shows the monthly sales for each salesperson.  The resulting DataFrame is in ascending order (based on sales made)
def monthly_sales(df):
  sales_by_person = df. groupby(['Month','SalesPerson'])['Total'].sum().reset_index()
  ascending = sales_by_person.sort_values('Total')
  return(ascending)

#monthly_sales(df)

#11: returns the zipcode with the worst total sales for the year
def worst_zip(df):
  worst = df. groupby(['Zip'])['Total'].sum().reset_index()
  output = worst.nsmallest(1, 'Total')
  return(output)

#worst_zip(df)

def sales_report(df):
  group = df.groupby(['Category', 'Product','SalesPerson'])['Total'].sum().reset_index()
  group = group.sort_values(['Product','Category','Total'], ascending = [False,False,False])
  group = group.sort_values(['Category','Product','Product'], ascending = [True,True,False])




  
  


  

  
  

  return(group)

#sales_report(df)

# sf = sales_report(df)
# print(sf.head(10))