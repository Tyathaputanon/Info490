# -*- coding: utf-8 -*-
"""INFO490-777

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lRYH7imHb2wDASQZxxg0viveJYAUWX5A
"""

from collections import Counter 
import requests
import re

# either version will work
#PG_HAMLET_URL = 'https://raw.githubusercontent.com/NSF-EC/INFO490Assets/master/src/datasets/hamlet/pg2265.txt'


PG_HAMLET_URL = 'http://www.gutenberg.org/cache/epub/2265/pg2265.txt'

def read_remote(url):
  # assumes the url is already encoded (see urllib.parse.urlencode)
  with requests.get(url) as response:
    response.encoding = 'utf-8'
    if response.status_code == requests.codes.ok: 
      # that is 200
      return response.text
  return None

def get_hash(text):
  import hashlib
  return hashlib.md5(text.encode('utf-8')).hexdigest()

def get_hamlet():
  try:
    ans = requests.get('http://www.gutenberg.org/cache/epub/2265/pg2265.txt')
    return ans.text
  except:
    return None

hamlet = get_hamlet()
#print(hamlet[0:100])

ANSWER_TO_LIFE = 42
def answer_to_life():
  text = get_hamlet()
  idx = text.find('To be,')
  ans = text[idx:idx+ANSWER_TO_LIFE]
  return ans

#print(answer_to_life())

def clean_hamlet(text):
  normalized_text = text.lower()
  up_to_word = "David Reed"
  rx_to_first = r'^.*?{}'.format(re.escape(up_to_word))
  clean_beginning = (re.sub(rx_to_first, '', text, flags=re.DOTALL).strip())
  
  clean_ending = clean_beginning.split("Prince of Denmarke.",1)[0]+'Prince of Denmarke.'
  return clean_ending
  
#print(clean_hamlet(hamlet))

cleaned = clean_hamlet(hamlet)

def split_text_into_tokens(text):
  regex = '[\'A-Za-z]+-?[\'A-Za-z]+'
  find = re.compile(regex)  #2
  keywords = find.findall(text)     #3
  ans = []
  for keyword in keywords:
    if (len(keyword) > 2 and keyword[0]=="'" and keyword[-1]=="'"):
      # Strip apostrophes
      stripped = keyword[1:-1]
      ans.append(stripped)
    else:
      ans.append(keyword)
  return ans

def find_lucky(text,num):
  words_with_num_char = re.findall(r'\b\w{{{}}}\b'.format(num), text)
  string_words= ' '.join(words_with_num_char)
  
  #num_words = [key for key, value in Counter(string_words.split()).items() if value == num]
  tokens = [token.lower() for token in split_text_into_tokens(text)]
  num_words = [key for key, value in Counter(tokens).items() if value == num and len(key) == num]
  num_words.sort()
  if (len(num_words) == num):
    return num_words
  else:
    return []

#print (find_lucky("boy cat dog boy cat dog boy cat dog animal", 3))
#print(find_lucky(cleaned,7))

def test_777():
  hamlet = clean_hamlet(get_hamlet())
  print(find_lucky(hamlet, 7))

# comment me out before submitting!!
test_777()