# -*- coding: utf-8 -*-
"""matplotlib2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I2E-qA8Lxl9qRzDfPLcuH0e1ZWrZefcY
"""

import matplotlib
import matplotlib.pyplot as plt
import numpy as np

def show():
  if matplotlib.get_backend() == 'agg':
    # replit
    plt.savefig(name_generator())
  else:
    #IPython
    plt.show()
  
def name_generator(preface='ex'):
  import os 
  count = 1
  while(True):
    name = "{}{}.png".format(preface, count)
    if os.path.isfile(name):
      count = count + 1
    else:
      print("file is ", name)
      return name

# the x values
x = np.linspace(0, 5, 21) 

# the y values
fx1 = x
fx2 = x ** 2
fx3 = x ** 3

def chart_v1(title, x, y):
  
  fig, axes = plt.subplots(nrows=1, ncols=1)
  axes.plot(x, y, color='blue')
  axes.set_title(title, fontsize=12)

chart_v1("x¹", x, fx1)
#show()

def chart_v1b(title, x1, y1, x2, y2):
  
  fig, axes = plt.subplots(nrows=1,ncols=1)
  axes.plot(x1,y1, x2,y2)
  axes.set_title(title, fontsize=12)

chart_v1b("x¹ x²", x, fx1, x,fx2)
#show()

# Data Transposition:
dataset = [fx1, fx2, fx3]
f_x     = np.transpose(dataset)
all_x   = np.transpose([x,x,x])

def chart_v2(title, x, y):
  fig, axes = plt.subplots(nrows=1,ncols=1)

  axes.plot(x, y, color='blue')  # with explicit x values
  #axes.plot(y, color='red')     # without x values

  axes.set_title(title, fontsize=12)

chart_v2("x¹ x² x³", all_x, f_x)
#show()

def chart_v3(title, x, y):

  fig, axes = plt.subplots(nrows=1,ncols=1)
  
  colors = ['red', 'green', 'blue']
  axes.set_prop_cycle(color=colors)
  axes.plot(x, y)

  axes.set_title(title, fontsize=12)

chart_v3("x¹ x² x³", all_x, f_x)
#show()

def chart_v4(title, x, y):

  fig, axes = plt.subplots(nrows=1,ncols=1)
  
  colors = ['red', 'green', 'blue']
  axes.set_prop_cycle(color=colors)
  plots = axes.plot(x, y)

  # legend
  axes.set_title(title, fontsize=12)
  lbls = title.split()
  axes.legend(handles=plots, loc='upper left', labels=lbls)

  # add a grid background
  axes.grid(True)

chart_v4("x¹ x² x³", all_x, f_x)
#show()

def chart_v5(title, x, y):

  fig, axes = plt.subplots(nrows=1,ncols=1)
  
  colors = ['red', 'green', 'blue']
  axes.set_prop_cycle(color=colors)
  plots = axes.plot(x, y)

  # legend
  axes.set_title(title, fontsize=12)
  lbls = title.split()
  axes.legend(handles=plots, loc='upper left', labels=lbls)

  # add a grid background
  axes.grid(True)

  axes.set_xlabel('x')
  axes.set_ylabel('f(x)')
  
  # add tick marks at each interval + 1/2 interval
  x_count = int(np.ma.size(x, axis=0))
  x_min = np.amin(x)
  x_max = np.amax(x)
  ticks = np.linspace(x_min, x_max, int(x_count/2.0))
  labels = ["{:0.2f}".format(i) for i in ticks]
  axes.set_xticks(ticks)
  axes.set_xticklabels(labels, fontsize=12, rotation=-45)

chart_v5("x¹ x² x³", all_x, f_x)
#show()

fig, axes = plt.subplots(nrows=1, 
                         ncols=3, figsize=(10, 4))
#print(type(axes), type(axes[0]))



def chart_s1(chart, x, y, title=''):
  chart.plot(x, y, label=title)
  chart.set_title(title, fontsize=12)

chart_s1(axes[0], x, fx1, 'x¹')
#show()

def chart_s2(chart, x, y, title=''):
  chart.plot(x, y, label=title, color="red")
  chart.set_title(title, fontsize=12)
  chart.set_ylim([0, 60])
  chart.set_xlim([2, 5])

chart_s1(axes[0], x, fx1, 'x¹')
chart_s2(axes[1], x, fx2, 'x²')
#show()

def chart_s3(chart, x, y, title=''):
  chart.plot(x, y, label=title, color='lightblue')
  chart.set_yscale("log")
  chart.set_title(title, fontsize=12)
  chart.grid(color='b', # b == blue
            alpha=0.5, 
            linestyle='dashed', 
            linewidth=0.5)
  chart.legend(loc='lower right')
chart_s1(axes[0], x, fx1, 'x¹')
chart_s2(axes[1], x, fx2, 'x²')
chart_s3(axes[2], x, fx3, 'x³')
fig.legend(loc='upper left')
#show()

def complex_1():
  fig = plt.figure()
  a = fig.add_subplot(1, 2, 1)  
  b = fig.add_subplot(2, 2, 2)  
  c = fig.add_subplot(2, 2, 4)
  a.set_title('top and bottom left')
  b.set_title('top right')
  c.set_title('bottom right')
  return fig

complex_1()
#show()

def complex_2():
  fig = plt.figure()
  fig.add_subplot(221, title='top left')
  fig.add_subplot(222, title='top right')    
  fig.add_subplot(223, title='bottom left')    
  fig.add_subplot(224, title='bottom right') 
  fig.tight_layout()
  return fig

complex_2() 
#show()

import matplotlib.ticker as ticker

def chart_s3b(axes, title, x, y):

  chart_s3(axes, title, x, y)
 
  # now update the axes
  axes.xaxis.set_major_locator(ticker.MaxNLocator(integer=True)) 
  axes.yaxis.set_major_formatter(ticker.ScalarFormatter())

fig, axes = plt.subplots(nrows=1, 
                         ncols=3, figsize=(10, 4))
chart_s2(axes[0], x, fx2, 'x²')
chart_s3b(axes[1], x, fx3, 'x³')
#show()



def chart_s3c(axes, title, x, y):

  chart_s3(axes, title, x, y)

  def custom(x,pos):
    if x < 1:
      return '{0:0.2f}'.format(x)
    else:
      return '{0:d}'.format(int(x))
  
  # now update the axes
  axes.xaxis.set_major_locator(ticker.MaxNLocator(integer=True)) 
  axes.yaxis.set_major_formatter(ticker.FuncFormatter(custom))

chart_s2(axes[0],  x, fx2, 'x²')
chart_s3(axes[1],  x, fx3, 'x³')
chart_s3c(axes[2], x, fx3, 'x³')
#show()

def plot_x2_x3():
  x = np.linspace(-20, 20, 100) 

  # the y values

  fx2 = x ** 2

  fx3 = x ** 3
  fig, axes = plt.subplots(nrows=1, 

                         ncols=2, figsize=(10, 4))

  axes[0].plot(x, fx2, label='x²', color='blue')

  axes[0].set_title('x²', fontsize=12)
  axes[1].plot(x, fx3, label='x³', color='green')

  axes[1].set_title('x³', fontsize=12)
  
  #chart.set(ylim=[0,60], xlim=[2,5], title='apples', xlabel='x')
  axes[0].set_ylim([0, 500])
  axes[1].set_ylim([-1000, 1000])
  fig.suptitle('Tiffany', fontsize=14)
  return fig

plot_x2_x3()
#show()